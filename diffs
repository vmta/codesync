#!/usr/bin/env bash

#####################################################################
# Filename: getDIFF
# Author:   vmta
# Date:     2018-09-24
# Version:  1.0


#####################################################################
# VARIABLES
#####################################################################
#
# GLOBAL DEFAULTS
#
DEFAULT_BRANCH="master";
DEFAULT_PATCH_DIR="$( pwd )/diffs";
DEFAULT_MAINSTREAM="bitcoin";
DEFAULT_REPOSITORY="umkoin";
#
# GLOBAL
#
BRANCH="";
PATCH_DIR="";
MAINSTREAM="";
REPOSITORY="";
FILENAMES_LIST="$( pwd )/filenames";
#####################################################################


#####################################################################
# REDEFINE BUILTIN COMMANDS (SILENCER)
#####################################################################
pushd() { command pushd "$@" > /dev/null; }
popd() { command popd "$@" > /dev/null; }
#####################################################################


repoReset()
{
    local REPO=$1;
    local BRANCH=$2;
    local LOG="/dev/null";
    if [[ $# -eq 3 ]]; then
        LOG=$3;
    fi

    pushd $REPO;
    git checkout -f $BRANCH;
    echo -n "Resetting $REPO/$BRANCH...";
    git reset --hard HEAD~1 > $LOG;
    if [ $? ]; then
        echo "done";
    else
        echo "failed";
    fi
    popd;
}

repoPull()
{
    local REPO=$1;
    local BRANCH=$2;
    local LOG="/dev/null";
    if [[ $# -eq 3 ]]; then
        LOG=$3;
    fi

    pushd $REPO;
    git checkout -f $BRANCH;
    echo -n "Pulling $REPO/$BRANCH...";
    git pull origin $BRANCH > $LOG;
    if [ $? ]; then
        echo "done";
    else
        echo "failed";
    fi
    popd;
}

doCleanup()
{
    local FILE=$1;

    if [ -f $FILE ]; then
        echo -n "Removing $FILE...";
        [ ! $( rm $FILE ) ] && echo "done" || echo "failed";
    elif [ -d $FILE ]; then
        if [ -z "$( ls -A $FILE )" ]; then
            echo -n "Removing $FILE...";
            [ ! $( rmdir $FILE ) ] && echo "done" || echo "failed";
        fi
    fi
}

doGetList()
{
    # Set git pull log
    gitlog="$( pwd )/git_pull.log";

    # Ensure repo is clean and synced
    repoReset $REPOSITORY $BRANCH;
    repoPull $REPOSITORY $BRANCH;

    # Pull git updates for mainstream
    repoReset $MAINSTREAM $BRANCH;
    repoPull $MAINSTREAM $BRANCH $gitlog;

    # Check if gitlog is not empty
    if [ -f $gitlog ]; then

        echo -n "Creating filename-list-file...";
        sed -n 's/ //g; /|/p;' $gitlog | cut -d'|' -f1 > $FILENAMES_LIST;
        if [ -s $FILENAMES_LIST ]; then
            echo "done";
        else
            echo "failed";
            exit 1;
        fi

    fi
}

doHelp()
{
    local STRING="Usage:\
                 $( basename $0 ) [b:hl:m:p:r:]\n\n
                 Options:\n
                 -b \t Requires argument, a branch name (defaults\n
                    \t to branch \"master\"; implies change of PATCH_DIR\n
                    \t by appending the latter)\n
                 -h \t Display this help and exit \n
                 -l \t Requires argument, tests if it is a valid\n
                    \t file path and sets FILENAMES_LIST\n
                 -m \t Requires argument, tests if it is a valid\n
                    \t dir path and sets MAINSTREAM\n
                 -p \t Requires argument, tests if it is a valid\n
                    \t dir path and sets PATCH_DIR\n
                 -r \t Requires argument, tests if it is a valid\n
                    \t dir path and sets REPOSITORY\n";

    echo -e $STRING;

    exit 0;
}


if [[ $# -gt 0 ]]; then

    # Cycle through options
    # -b requires an argument (branch name, defaults to master;
    #    implies change of PATCH_DIR by appending the latter)
    # -h no arguments required, display usage info
    # -l requires an argument (logfilename)
    # -m requires an argument (mainstream repository)
    # -p requires an argument (patch dir)
    # -r requires an argument (local repository)
    #
    while getopts "b:hl:m:p:r:" opt; do

        case $opt in

            b)  # Set branch name
                if [ ! -z "$OPTARG" ]; then
                    BRANCH=$OPTARG;
                fi
                ;;

            h)  # Run help function and exit
                doHelp;
                ;;

            l)
                if [ -f $OPTARG ]; then
                    FILENAMES_LIST=$OPTARG;
                fi
                ;;

            m)
                if [ -d $OPTARG ]; then
                    MAINSTREAM=$OPTARG;
                fi
                ;;

            p)
                if [ -d $OPTARG ]; then
                    PATCH_DIR=$OPTARG;
                fi
                ;;

            r)
                if [ -d $OPTARG ]; then
                    REPOSITORY=$OPTARG;
                fi
                ;;

            default) # Option is omitted, displa usage info
                doHelp;
                ;;

        esac

    done

fi

setDefaults()
{
    if [ -z $BRANCH ]; then
        BRANCH=$DEFAULT_BRANCH;
    fi

    if [ -z $PATCH_DIR ]; then
        PATCH_DIR=$DEFAULT_PATCH_DIR$BRANCH;
    else
        PATCH_DIR=$PATCH_DIR$BRANCH;
    fi

    if [ -z $MAINSTREAM ]; then
        MAINSTREAM=$DEFAULT_MAINSTREAM;
    fi

    if [ -z $REPOSITORY ]; then
        REPOSITORY=$DEFAULT_REPOSITORY;
    fi

#REM    echo -n "$BRANCH \n $PATCH_DIR \n $MAINSTREAM \n $REPOSITORY \n";
}

setDefaults;
doGetList;


# Check if path for storing patches exists
# If it is not, then create and report
if [ ! -d $PATCH_DIR ]; then
    echo -n "Creating $PATCH_DIR";
    [ ! $( mkdir $PATCH_DIR ) ] && echo "...done" || echo "...failed";
else
    echo "$PATCH_DIR... exists";
fi


# File enumerator
fnnum=0;

while IFS='' read -r line || [[ -n "$line" ]]; do

    MAINSTREAMN="$MAINSTREAM/$line";
    REPOSITORYN="$REPOSITORY/$( echo $line | sed 's/bitcoin/umkoin/g' )";

    if [ ! -f "$REPOSITORYN" ]; then        # Check if cloned Repo file exists

        if [ ! -d ${REPOSITORYN%/*} ]; then # Check if path exists
            mkdir ${REPOSITORYN%/*};        # Create path if it doesn't exist
        fi

        touch "$REPOSITORYN";               # Create stub if needed

    fi

    if [ ! -f "$MAINSTREAMN" ]; then # Check if original Repo file exists

        rm "$REPOSITORYN"; # There is no original Repo source, remove
                           # orphaned cloned Repo file

        continue;          # No need to proceed with absent files,
                           # skip to next file
    fi

    # Set forth the umkoin...
    sed -i 's/БІТКО/УМКО/g' $MAINSTREAMN;
    sed -i 's/Бітко/Умко/g' $MAINSTREAMN;
    sed -i 's/бітко/умко/g' $MAINSTREAMN;
    sed -i 's/БИТКО/УМКО/g' $MAINSTREAMN;
    sed -i 's/Битко/Умко/g' $MAINSTREAMN;
    sed -i 's/битко/умко/g' $MAINSTREAMN;
    sed -i 's/BITCOIN/UMKOIN/g' $MAINSTREAMN;
    sed -i 's/Bitcoin/Umkoin/g' $MAINSTREAMN;
    sed -i 's/bitcoin/umkoin/g' $MAINSTREAMN;
    sed -i 's/bitcon/umkon/g' $MAINSTREAMN;
    sed -i 's/8332/6332/g' $MAINSTREAMN;
    sed -i 's/8333/6333/g' $MAINSTREAMN;
    sed -i 's/18333/16333/g' $MAINSTREAMN;
    sed -i 's/BTC/UMK/g' $MAINSTREAMN;
    sed -i 's/btc/umk/g' $MAINSTREAMN;
    sed -i 's/2009, COPYRIGHT_YEAR/2017, COPYRIGHT_YEAR/g' $MAINSTREAMN;
    sed -i 's/URL_WEBSITE = \"<https:\/\/bitcoincore/URL_WEBSITE = \"<http:\/\/umkoin/g' $MAINSTREAMN;
    sed -i 's/COPYRIGHT_STR \"2009-\" STRINGIZE/COPYRIGHT_STR \"2017-\" STRINGIZE/g' $MAINSTREAMN;
    sed -i 's/5wyqrzbvrdsumnok/klfchu53kxun6zx5/g' $MAINSTREAMN;
    sed -i 's/arg(2009)/arg(2017)/g' $MAINSTREAMN;
    # Set back the bitcoin...
    sed -i 's/en.umkoin.it/en.bitcoin.it/g' $MAINSTREAMN;
    sed -i 's/Umkoin Core devel/Bitcoin Core devel/g' $MAINSTREAMN;
    sed -i 's/umkoin-core\//bitcoin-core\//g' $MAINSTREAMN;
    sed -i 's/umkoincore.org/bitcoincore.org/g' $MAINSTREAMN;
    sed -i 's/umkoin.stackexchange/bitcoin.stackexchange/g' $MAINSTREAMN;
    sed -i 's/umkointalk.org/bitcointalk.org/g' $MAINSTREAMN;
    sed -i 's/umkoin\/bips\/blob\//bitcoin\/bips\/blob\//g' $MAINSTREAMN;
    sed -i 's/umkoin\/umkoin\/blob\//bitcoin\/bitcoin\/blob\//g' $MAINSTREAMN;
    sed -i 's/umkoin\/umkoin\/issues\//bitcoin\/bitcoin\/issues\//g' $MAINSTREAMN;
    sed -i 's/umkoin\/umkoin\/pull\//bitcoin\/bitcoin\/pull\//g' $MAINSTREAMN;
    # Set forth the umkoin in special cases...
    sed -i 's/bitcoincore.org\/cfields/umkoin.org\/cfields/g' $MAINSTREAMN;
    sed -i 's/github.com\/bitcoin-core\/gitian.sigs/github.com\/umkoin\/gitian.sigs/g' $MAINSTREAMN;
    sed -i 's/github.com\/bitcoin-core\/umkoin/github.com\/umkoin\/umkoin/g' $MAINSTREAMN;
    # Genesis block takeover
    sed -i 's/04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f/04880766d2f2a4f8e8a2ca8ef5f6baf014f2ac460acc69604df1af697ec9cd9d01548a7d6015e0cabfcbc160316143d9aae4a17c944f611b8daf18fb1492935d67/g' $MAINSTREAMN;
    sed -i 's/04 67 8a fd b0/04 88 07 66 d2/g' $MAINSTREAMN;

    if [ -f "$PATCH_DIR/a$fnnum.txt" ]; then
        continue;
    fi

    git diff $REPOSITORYN $MAINSTREAMN > "$PATCH_DIR/a$fnnum.txt";

    if [ ! -s "$PATCH_DIR/a$fnnum.txt" ]; then

        echo -n "Empty file $PATCH_DIR/a$fnnum.txt";
        rm "$PATCH_DIR/a$fnnum.txt";

        if [ $? ]; then
            echo "...deleted";
        else
            echo "...deletion failed";
        fi

    fi

    ((fnnum++));

done < "$FILENAMES_LIST";


#####
# Cleanup temporary files
#
doCleanup $gitlog;
doCleanup $FILENAMES_LIST;
doCleanup $PATCH_DIR;


#####
# Report for which branch diffs were processed.
#
if [ -d $PATCH_DIR ]; then
    echo "Diffs between $REPOSITORY $MAINSTREAM on branch $BRANCH are in $PATCH_DIR";
    ls -l $PATCH_DIR;
fi


exit $?
