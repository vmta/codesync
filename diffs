#!/usr/bin/env bash

#####################################################################
# The purpose of this script is to get diffs between the clone and
# the mainstream repositories.
#
# The script accepts arguments:
# -a - get patches to all unsynced commits, rather than the default
#      first unsynced commit only mode
# -b - get branch name to compare repos (defaults to master)
# -c - get cloned repository name (should be locally accessible)
# -h - display help and usage info and exit
# -i - enable user interaction after patches are created
# -m - get mainstream repository name (should be locally accessible)
# -p - switch single/multi file patch creation mode (default to
#      single file mode)
# -u - pull updates to repositories
# -v - set verbosity level
#
# If no arguments specified, the script will display help and usage
# information with immediate execution abortion.
#
# Author: Igor Gunia <vmta@yahoo.com>
# Date:   2020-02-10
# Ver.:   0.5
#
# v.0.5   2020-02-10
#         When creating new dirs, use mkdir with "-p" option
#         and make it more prone to error, when folder
#         hierarchy changes
#
# v.0.4   2019-05-27
#         Include long form of options
#
# v.0.3   2019-02-20
#         Implement double checking on user request to pull updates
#         to repositories. Is triggered upon provision of -u to the
#         script
#
# v.0.2   2019-02-14
#         Allow command-line arguments "c", for specifying CLONE
#         repository and "m". for specifying MAINSTREAM repository
#
# v.0.1   2019-02-02
#         Initial version
#####################################################################


#####################################################################
# VARIABLES
#####################################################################
#
DIR="$( cd $( dirname ${BASH_SOURCE[0]} ) > /dev/null 2>&1 && pwd )";
#
source $DIR/common/config;
#
FILES=();
PATCH_DIR="$DIR/git.diffs";
PATCH_FILE="$DIR/git.diff";
SUBST=("$DIR/common/substitutes" "$DIR/common/substitutes.diff");
VERSION="0.1";
#####################################################################


#####################################################################
# REDEFINE BUILTIN COMMANDS (SILENCER), PROVIDE COMMON FUNCTIONS
#####################################################################
source $DIR/common/silencer;
source $DIR/common/repository;
#####################################################################


#####################################################################
# Function displayHelp
#
# In case the script is called with no arguments, or arguments are
# omitted, display short message with info on script version,
# acceptable arguments and an example.
#
function displayHelp()
{
    local STRING="Script $( basename $0 ) version $VERSION\n
                 Usage:\n
                   $( basename $0 ) [ab:c:him:p:uv]\n\n
                 Options:\n
                   -a \t Specify to get patches for all unsynced\
                         commits, rather than the first one (the\
                         default)\n
                   -b \t Requires argument, a branch name to set\
                         tracking on, several branches can be\
                         specified delimited with '|' provided that\
                         they are surrounded by quotes\n
                   -c \t Requires cloned repository name. The name\
                         should be locally accessible (short name,\
                         i.e. umkoin, bitcoin, etc).\n
                   -h \t Requires no argument, display help info and\
                         exit\n
                   -i \t Requires no argument, when specified,\
                         provides interaction after patches are\
                         created\n
                   -m \t Requires mainstream repository name. The\
                         name should be locally accessible (short\
                         name, i.e. umkoin, bitcoin, etc).\n
                   -p \t Requires argument, either \"single\" or\
                         \"multi\" to switch between single- and\
                         multi-file patch creation mode\n
                   -u \t Pull updates to repositories.\n
                   -v \t Requires no argument, when specified,\
                         produces broader logs.\n\n
                 Example:\n\n
                   $( basename $0 ) -b '0.17' -p 'single'\n\n
                 On completion, there shall be a single-file patch\
                 ready for final review/application on the cloned\
                 repository branch '0.17'. Also note, that option\
                 -p 'single' could effectively be omitted, since\
                 it is the default behaviour, so the above command\
                 may as well be: $( basename $0 ) -b '0.17'\n\n
                   $( basename $0 ) -p 'multi' -c 'abc' -m def\n\n
                 On completion, there shall be a folder, containing\
                 per-file patches ready for final review/application\
                 on the cloned repository 'abc' branch 'master' based\
                 on mainstream repository 'def'. Even though the\
                 option -b 'master' was not specified it is by\
                 default preset to work on the master branch, if not\
                 set otherwise.\n";

    echo -e $STRING | more;

    exit 1;
}
#####################################################################


#####################################################################
# Interaction is requested.
# Provide some interactivity.
#
function interact()
{
    read -p "Would you like to review patches? [Y/N] " QA;
    if [[ "$QA" =~ ^[Yy]$ ]]; then
        [[ $ONE_FILE_DIFF -eq 0 ]] && \
            "$DIR/review" -r all -b $BRANCH -p $PATCH_DIR || \
            "$DIR/review" -r all -b $BRANCH -f $PATCH_FILE;
    else
        read -p "Would you like to apply patches? [Y/N] " QA;
        if [[ "$QA" =~ ^[Yy]$ ]]; then
            ./sync -b $BRANCH;
        else
            read -p "Would you like to remove patches? [Y/N] " QA;
            if [[ "$QA" =~ ^[Yy]$ ]]; then
                [[ $ONE_FILE_DIFF -eq 0 ]] && \
                    rm -fr $PATCH_DIR || \
                    rm -f $PATCH_FILE;
            fi
        fi
    fi
}


#####################################################################
# Check if script is called with arguments.
# Cycle through them.
#
if [[ $# -gt 0 ]]; then

    OPTIONS=$( getopt \
               --options a,b:,c:,h,i,m:,p:,u,v \
               --longoptions all \
               --longoptions branch: \
               --longoptions clone: \
               --longoptions help \
               --longoptions interact \
               --longoptions mainstream: \
               --longoptions patchmode: \
               --longoptions update \
               --longoptions verbose \
               --name "$( basename "$0" )" \
               -- "$@" );

    eval set -- $OPTIONS;

    while true
    do
        case "$1" in

            -a|--all)
              # Perform sync to the latest MAINSTREAM HEAD
              FLAG_FIRST_UNSYNCED=0;
              ;;

            -b|--branch)
              # Set branch name
              [[ ! -z "$2" ]] && \
                  BRANCH=$2;
              shift;
              ;;

            -c|--clone)
              # Set cloned repo name
              [[ ! -z "$2" ]] && \
                  CLONE=$2;
              shift;
              ;;

            -h|--help)
              # Display help and usage info and exit
              displayHelp;
              ;;

            -i|--interact)
              # Set interactivity
              FLAG_INTERACT=1;
              ;;

            -m|--mainstream)
              # Set mainstream repo name
              [[ ! -z "$2" ]] && \
                  MAINSTREAM=$2;
              shift;
              ;;

            -p|--patchmode)
              # Switch single/multi file patch creation mode
              [[ ! -z "$2" && "$2" == "single" ]] && \
                  ONE_FILE_DIFF=1;
              shift;
              ;;

            -u|--update)
              # Pull updates to repositories
              FLAG_PULL=1;
              ;;

            -v|--verbose)
              # Set DEBUG
              ((FLAG_DEBUG++));
              ;;

            --)
              shift;
              break;
              ;;

        esac

        shift;

    done

    # PERFORM SOME ACTION

    # Check if CLONE repo local folder is accessible or exit.
    # Enter the CLONE repo local folder.
    # Checkout into BRANCH.
    # Get LAST_SYNCED mainstream commit SHA1.
    [[ -d "$DIR/$CLONE" ]] || exit 1;
    pushd $DIR/$CLONE;
    git checkout -f $BRANCH;
    [[ $FLAG_PULL -eq 1 ]] && updateRepo;
    LAST_SYNCED=$( getLastSyncedCommit );
    popd;

    # Check if MAINSTREAM repo local folder is accessible or exit.
    # Enter the MAINSTREAM repo local folder.
    # Checkout into BRANCH.
    # Pull updates from remote server if required.
    #
    # Check if diff between the last synced and first unsynced
    # commits is to be taken into consideration (the default).
    # Reset to that commit suppressing the logs. Otherwise
    # consider first unsynced commit that of the HEAD.
    #
    # Check if one-file-diff is requested.
    #   (true)   get diff between the last synced commit and first
    #            unsynced one, run through substitution filter and
    #            prepare one-file-patch, check if created PATCH_FILE
    #            is empty and remove, otherwise leave intact and
    #            report its name.
    #   (false)  get list of changed files between the last synced
    #            and first unsynced commits, auto-rename if needed,
    #            and get per-file-patches.
    [[ -d "$DIR/$MAINSTREAM" ]] || exit 2;
    pushd $DIR/$MAINSTREAM;
    git checkout -f $BRANCH;
    [[ $FLAG_PULL -eq 1 ]] && updateRepo;

    if [[ $FLAG_FIRST_UNSYNCED -eq 1 ]]; then
        UNSYNCED=$( getFirstUnsyncedCommit $LAST_SYNCED );
        git reset --hard $UNSYNCED > /dev/null 2>&1;
    else
        UNSYNCED="HEAD";
    fi

#    if [ $ONE_FILE_DIFF -eq 1 ]; then
#        git diff $LAST_SYNCED $UNSYNCED | \
#            sed -f $SUBST | \
#            sed '/^diff --git*/ s/ a\// a\/'$CLONE'\//' | \
#            sed '/^--- a*/ s/ a\// a\/'$CLONE'\//' > $PATCH_FILE;
#        [[ -f $PATCH_FILE && ! -s $PATCH_FILE ]] && \
#            rm $PATCH_FILE || \
#            printf "Diff file: %s will patch %d files.\n" \
#                    $PATCH_FILE \
#                    $( git diff --name-only $LAST_SYNCED $UNSYNCED | \
#                    wc -l );
#        [ $FLAG_INTERACT -gt 0 ] && interact;
#    else
        for FILE in $( git diff --name-only $LAST_SYNCED $UNSYNCED ); do

            # Test if FILE was removed from the MAINSTREAM
            # clean from CLONE and skip to next FILE
            if [[ ! -f $FILE ]]; then
                rm $DIR/$CLONE/$( echo $FILE | \
                    sed 's/'$MAINSTREAM'/'$CLONE'/g' ) > \
                    /dev/null 2>&1;
                continue;
            fi

            FILES+=( $( echo $FILE | sed 's/'$MAINSTREAM'/'$CLONE'/g' ) );

            [[ ! -d $PATCH_DIR ]] && mkdir $PATCH_DIR;
            DEST="$PATCH_DIR/$( echo ${FILES[-1]##*/} )";
            # as it happens, there could be several files by the
            # same name, therefore, need to preserve already created
            # patches from overwriting
            [[ -f $DEST ]] && DEST="$DEST.$( tr -cd '[:alnum:]' < \
                                  /dev/urandom | \
                                  fold -w 8 | \
                                  head -n 1 )";
            if [[ ! -f "$DIR/$CLONE/${FILES[-1]}" ]]; then
                [[ ! -d "$( dirname $DIR/$CLONE/${FILES[-1]} )" ]] && \
                    mkdir -p "$( dirname $DIR/$CLONE/${FILES[-1]} )";
                touch "$DIR/$CLONE/${FILES[-1]}";
            fi

            sed -i -f ${SUBST[0]} $FILE;
            git diff "../$CLONE/${FILES[-1]}" $FILE | sed -f ${SUBST[1]} > $DEST;

            # check if created diff is empty and remove,
            # otherwise leave it intact
            [[ -f $DEST && ! -s $DEST ]] && rm $DEST;
        done

        # check if PATCH_DIR folder has patches, remove if it is empty,
        # otherwise report number of files changed within original
        # repository, the number of actual patches (non-empty), and
        # if the verbosity level is adjusted, report names of the
        # patches
        if [[ -d $PATCH_DIR && -z "$( ls -A $PATCH_DIR )" ]]; then
            rmdir $PATCH_DIR;
            printf "%d files changed in %s, but no patches are\
                    required for %s.\n"\
                    ${#FILES[@]}\
                    $MAINSTREAM\
                    $CLONE;
        elif [[ -d $PATCH_DIR ]]; then
            printf "Files changed :\t%d\n" ${#FILES[@]};
            [[ $FLAG_DEBUG -gt 0 ]] && \
                printf "              :\t%s\n" ${FILES[@]};
            printf "Files to patch:\t%d\n" $( ls -A $PATCH_DIR | \
                                           wc -l );
            [[ $FLAG_DEBUG -gt 0 ]] && \
                printf "              :\t%s\n" $( ls -A $PATCH_DIR );

            [[ $FLAG_INTERACT -gt 0 ]] && interact;
        else
            echo "No patches necessary, repositories seem to be in sync.";
        fi
#    fi
    popd;

else
    displayHelp;
fi


exit $?
