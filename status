#!/usr/bin/env bash

#####################################################################
# The purpose of this script is to report status of the specified
# repositories, whether they're synced at present. When given extra
# arguments, will pull updates to repositories and report status
# after this pull.
#
# The script accepts arguments:
#
# -b or --branch
# get branch name to compare repos (defaults to master)
#
# -c or --clone
# get cloned repository name (should be locally accessible)
#
# -h or --help
# display help and usage info and exit
#
# -m or --mainstream
# get mainstream repository name (should be locally accessible)
#
# -u or --update
# requires no arguments, will pull updates
#
# -v or --verbose
# set verbosity level
#
# Author: Igor Gunia <vmta@yahoo.com>
# Date:   2019-04-05
# Ver.:   0.2
#
# v.0.2   2019-04-05
#         Include long form of options
#
# v.0.1   2019-01-21
#         Initial version
#####################################################################


#####################################################################
# VARIABLES
#####################################################################
#
DIR="$( cd $( dirname ${BASH_SOURCE[0]} ) > /dev/null 2>&1 && pwd )";
#
source $DIR/common/config;
#
REPOS=($CLONE $MAINSTREAM);
VERSION="0.2";
#####################################################################


#####################################################################
# REDEFINE BUILTIN COMMANDS (SILENCER), PROVIDE COMMON FUNCTIONS
#####################################################################
source common/silencer;
source common/repository;
#####################################################################


#####################################################################
# Function displayHelp
#
# In case the script is called with no arguments, or arguments are
# omitted, display short message with info on script version,
# acceptable arguments and an example.
#
function displayHelp()
{
    local STRING="Script $( basename $0 ) version $VERSION\n
                 Usage:\n
                   $( basename $0 ) [b:c:hm:uv]\n\n
                 Options:\n\n
                   -b or --branch\n
                      \t Requires branch name. Defaults to \"master\".\n\n
                   -c or --clone\n
                      \t Requires cloned repository name. The name should be locally accessible\n
                      \t (short name, i.e. umkoin, bitcoin, etc), can be.\n\n
                   -h or --help\n
                      \t Requires no argument, display help info and exit.\n\n
                   -m or --mainstream\n
                      \t Requires mainstream repository name. The name should be locally\n
                      \t accessible (short name, i.e. umkoin, bitcoin, etc).\n\n
                   -u or --update\n
                      \t Requires no argument, pull updates to repos, then report their status.\n
                      \t If unspecified repos are not updated prior to reporting status.\n\n
                   -v or --verbose\n
                      \t Requires no argument, when specified, produces broader logs.\n\n
                 Example:\n\n
                   $( basename $0 ) -u\
                                    -c umkoin\
                                    -m bitcoin\
                                    -b master\
                                    -v\n\n
                 On completion, the status for both repositories will be shown after pulling\n
                 respective updates.\n";

    echo -e $STRING | more;

    exit 0;
}
#####################################################################


#####################################################################
# Function compareRepo
#
function compareRepo()
{
    local CLONE=$1;
    local MAIN=$2;

    local C_HEAD=""; # This one shall retrieve a mainstream commit
                     # SHA1 from the subject of the latest commit.
    local M_HEAD=""; # Actual HEAD of the MAINSTREAM.
    local M_COMMITS=(); # Array of commits the CLONE is behind of
                        # the MAINSTREAM.

    pushd $CLONE;
    git checkout -f $BRANCH > /dev/null 2>&1;
    C_HEAD=$( getLastSyncedCommit );
    popd;

    pushd $MAIN;
    git checkout -f $BRANCH > /dev/null 2>&1;
    M_HEAD=$( git log -n 1 --format='%H' );
    M_COMMITS=( $( getUnsyncedCommits $C_HEAD ) );

    # Now as we gathered data, let's
    # report usefull info.
    #
    # Such as:
    # 1. HEAD SHA1 of the mainstream
    # 2. SHA1 of the last commit the clone is synced to
    # 3. SHA1 of the first unsynced commit
    # 4. List of SHA1 commits starting from the latest
    # 5. Total number of commits the clone is behind mainstream

    echo "$MAIN $BRANCH is at $M_HEAD";
    echo "$CLONE $BRANCH is synced to $C_HEAD";
    [ ! -z $( getFirstUnsyncedCommit $C_HEAD ) ] && \
        echo "First unsynced commit is $( getFirstUnsyncedCommit $C_HEAD )";

    if [ ${#M_COMMITS[@]} -gt 0 ]; then
        if [ $FLAG_DEBUG -gt 0 ]; then
            for COMMIT in ${M_COMMITS[@]}; do
                if [ $FLAG_DEBUG -gt 1 ]; then
                    echo "  $( git log -n 1 --format='%H %aN %aD' $COMMIT )";
                else
                    echo "  $COMMIT";
                fi
            done
        fi
        echo "There are ${#M_COMMITS[@]} unsynced commits";
    else
        echo "Repositories are in sync";
    fi
    popd;

}
#####################################################################


#####################################################################
# Check if script is called with arguments.
# Cycle through them.
if [[ $# -gt 0 ]]; then

    OPTIONS=$( getopt \
               --options b:,c:,h,m:,u,v \
               --longoptions branch: \
               --longoptions clone: \
               --longoptions help \
               --longoptions mainstream: \
               --longoptions update \
               --longoptions verbose \
               --name "$( basename "$0" )" \
               -- "$@" );

    eval set -- $OPTIONS;

    while true
    do
        case "$1" in

            -b|--branch)
              # Set branch name
              [[ ! -z "$2" ]] && \
                  BRANCH=$2;
              shift;
              ;;

            -c|--clone)
              # Set cloned repo name
              [[ ! -z "$2" ]] && \
                  REPOS[0]=$2;
              shift;
              ;;

            -h|--help)
              # Display help and usage info and exit
              displayHelp;
              ;;

            -m|--mainstream)
              # Set mainstream repo name
              [[ ! -z "$2" ]] && \
                  REPOS[1]=$2;
              shift;
              ;;

            -u|--update)
              # Set FLAG_PULL
              FLAG_PULL=1;
              ;;

            -v|--verbose)
              # Set DEBUG
              ((FLAG_DEBUG++));
              ;;

            --)
              shift;
              break;
              ;;

        esac

        shift;

    done

    # PERFORM SOME ACTION

    # If update was requested on the command line,
    # checkout to BRANCH and proceed with local
    # repos update.
    if [ $FLAG_PULL -eq 1 ]; then
        for REPO in ${REPOS[@]}; do
            if [ -d $REPO ]; then
                pushd $REPO;
                    updateRepo $BRANCH;
                popd;
            else
                echo ">> Error: cannot change working directory to local $REPO <<";
            fi
        done
    fi

    # Call compareRepo to actually compare repo
    # statuses.
    compareRepo ${REPOS[0]} ${REPOS[1]};

else
    displayHelp;
fi


exit $?
