#!/usr/bin/env bash

#####################################################################
# The purpose of this script is to provide reliable means of patch-
# review, whether in single- or multi-file mode.
#
# The script accepts arguments:
# -b - get branch name to review patches for
# -c - get cloned repository name (should be locally accessible)
# -e - specify if reviewing "locally" or from a "remote" location,
#      this options is used to determine which editor to use with
#      default editor set to "gedit" (the local mode)
# -f - specify alternative path to single-file patch
# -h - display help and usage info and exit
# -m - get mainstream repository name (should be locally accessible)
# -p - specify alternative path to multi-file patches
# -r - define which mode to use for reviewing, either to review "all"
#      or only certain files, that conform to predefined conditions
# -v - set verbosity level
#
# Author: Igor Gunia <vmta@yahoo.com>
# Date:   2019-05-23
# Ver.:   0.3
#
# v.0.3   2019-05-23
#         Include long form of options
#
# v.0.2   2019-02-14
#         Allow command-line arguments "c", for specifying CLONE
#         repository and "m". for specifying MAINSTREAM repository
#
# v.0.1   2018-09-24
#         Initial version
#####################################################################


#####################################################################
# VARIABLES
#####################################################################
#
DIR="$( cd $( dirname ${BASH_SOURCE[0]} ) > /dev/null 2>&1 && pwd )";
#
source $DIR/common/config;
#
PATCH_DIR="$DIR/git.diffs";
PATCH_FILE="$DIR/git.diff";
VERSION="0.3";
#####################################################################


#####################################################################
# Function displayHelp
#
# In case the script is called with no arguments, or arguments are
# omitted, display short message with info on script version,
# acceptable arguments and an example.
#
displayHelp()
{

    local STRING="Script $( basename $0 ) version $VERSION\n
                 Usage:\n
                   $( basename $0 ) [b:c:e:f:hm:p:r:v]\n\n
                 Options:\n
                   -b \t Requires branch name as an argument\
                         (default: $DEFAULT_BRANCH)\n
                   -c \t Requires cloned repository name. The name\
                         should be locally accessible (short name,\
                         i.e. umkoin, bitcoin, etc).\n
                   -e \t Requires argument \"remote\" and sets an editor\
                         to nano instead of the default gedit\n
                   -f \t Specify alternative path to single-file patch\n
                   -h \t Display this help and exit\n
                   -m \t Requires mainstream repository name. The\
                         name should be locally accessible (short\
                         name, i.e. umkoin, bitcoin, etc).\n
                   -p \t Specify alternative path to multi-file patches\n
                   -r \t Requires argument \"all\" and displays all\
                         patches, regardless of stop words\n
                   -v \t Requires no argument, when specified,\
                         produces broader logs.\n\n
                 Example:\n\n
                   $( basename $0 ) -b master -f /path/to/single-file/patch\n\n
                 On completion, single-file patch will be opened with\
                 the default editor (gedit), regardless of predefined\
                 conditions for patch review. Option '-b master'\
                 could be omitted, since it is the default.\n\n
                   $( basename $0 ) -b 0.16 -r all -e remote\n\n
                 Patches for branch 0.16 will be prepared for review\
                 in multi-file all-mode, using the alternate editor.\n\n
                   $( basename $0 ) -b 0.16 -r all -e remote -p\
                   /path/to/multi-file/patches\n\n
                 The same as above, but using alternative path to\
                 patches.\n";

    echo -e $STRING | more;

    exit 1;
}
#####################################################################


#####################################################################
# Check if given PATH is empty.
#
isEmpty()
{
    if [ -d $1 ]; then
        [ ! -z "$( ls -A $1 )" ] && \
            echo 1; # Multi-file patch mode
                    # Patches are found
    elif [ -f $1 ]; then
        [ -s $1 ] && \
            echo 1; # Single-file patch mode
                    # Patches are found
    else
        echo 0; # Patches are not found
    fi
}


#####################################################################
# Read the patches
#
doReview()
{

    if [ $FLAG_READALL -gt 0 ]; then

        # FLAG_READALL is set to 1 via option -r
        #

        # Cycle through all patch files in a PATCH_DIR
        #
        if [ -d $PATCH_DIR ]; then
            for file in $( ls -A $PATCH_DIR ); do

                # Review, edit and save if necessary
                #
                $EDITOR $PATCH_DIR/$file;
            done
        elif [ -f $PATCH_FILE ]; then
            $EDITOR $PATCH_FILE;
        fi

    else

        # FLAG_READALL is set to default value of 0
        #

        # Set "stop" words to look for in a patch files
        #
        declare -a stop_word=("bitcoin" "chainparam" "configure" "COPYRIGHT" "klfchu53kxun6zx5" "splash");

        filenames=();

        # Cycle through "stop" words
        #
        for word in "${stop_word[@]}"
        do

            # Get filenames
            #
            if [ $word == "bitcoin" ]; then

                # Get only filename where "stop" word "bitcoin" is present more than twice
                #
                filename=$( grep -H -c $word $PATCH_DIR/* | grep -v :2 | cut -d':' -f1 );
            else

                # Get filename where "stop" words other than "bitcoin" are present at least once
                #
                filename=$( grep -H -c $word $PATCH_DIR/* | grep -v :0 | cut -d':' -f1 );
            fi

            [[ $filename != "" ]] && filenames+=( $filename );

        done

        # now cycle through the filenames and read them
        [[ ${#filenames[@]} -gt 0 ]] && $EDITOR ${filenames[@]};

    fi

}


#####################################################################
# Check if script is called with arguments.
# Cycle through them.
if [[ $# -gt 0 ]]; then

    OPTIONS=$( getopt \
               --options b:,c:,e:,f:,h,m:,p:,r:,v \
               --longoptions branch: \
               --longoptions clone: \
               --longoptions editor: \
               --longoptions help \
               --longoptions mainstream: \
               --longoptions read: \
               --longoptions verbose \
               --name "$( basename "$0" )" \
               -- "$@" );

    eval set -- $OPTIONS;

    while true
    do
        case "$1" in

            -b|--branch)
              # Set branch name
              [[ ! -z "$2" ]] && \
                  BRANCH=$2;
              shift;
              ;;

            -c|--clone)
              # Set cloned repo name
              [[ ! -z "$2" ]] && \
                  CLONE=$2;
              shift;
              ;;

            -e|--editor)
              # Set editor to nano if 'remote' is specified
              [[ "$2" == "remote" ]] && \
                  EDITOR="/bin/nano";
              shift;
              ;;

            -f|--file)
              # Set alternate path to patch-file
              [[ ! -z "$2" ]] && \
                  PATCH_FILE="$2";
              shift;
              ;;

            -h|--help)
              # Display help and usage info and exit
              displayHelp;
              ;;

            -m|--mainstream)
              # Set mainstream repo name
              [[ ! -z "$2" ]] && \
                  MAINSTREAM=$2;
              shift;
              ;;

            -p|--patches)
              # Set alternate path to patches
              [[ -d $2 ]] && \
                  PATCH_DIR=$2;
              shift;
              ;;

            -r|--read)
              # Define if all patch files should be reviewed
              [[ "$2" == "all" ]] && \
                  FLAG_READALL=1;
              shift;
              ;;

            -v|--verbose)
              # Set DEBUG
              ((FLAG_DEBUG++));
              ;;

            --)
              shift;
              break;
              ;;

        esac

        shift;

    done


    # PERFORM SOME ACTION

    #####
    # Check if PATCH_DIR exists and is not empty and do patch review.
    #
    #if [ -d $PATCH_DIR ] && [ $( isEmpty $PATCH_DIR ) -gt 0 ]; then
    #
    # No need to check if the patch_dir is a valid path,
    # instead check if it is not empty
    if [[ $( isEmpty $PATCH_DIR ) -gt 0 || $( isEmpty $PATCH_FILE ) -gt 0 ]]; then
        doReview;
    else
        echo "There are no patches.";
    fi

else
    displayHelp;
fi

exit $?
